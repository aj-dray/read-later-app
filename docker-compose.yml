services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: local
      POSTGRES_PASSWORD: dev-password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U local -d postgres"]
      interval: 2s
      timeout: 5s
      retries: 30
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro

  backend:
    build:
      context: ./backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: local
      POSTGRES_PASSWORD: dev-password
      SERVER_SECRET: dev-secret
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:?Set MISTRAL_API_KEY in backend/.env or your shell}
      COHERE_API_KEY: ${COHERE_API_KEY:?Set COHERE_API_KEY in backend/.env or your shell}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"

  seed-demo:
    build:
      context: ./backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: local
      POSTGRES_PASSWORD: dev-password
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "database/seed_demo.py", "database/demo_data.json"]

  frontend:
    build:
      context: ./frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_LATER_SERVICE_URL: http://backend:8000
      LATER_SERVICE_URL: http://backend:8000
      BACKEND_URL: http://backend:8000
      LATER_SESSION_SECRET: insecure-dev-secret
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"

volumes:
  pgdata: {}
